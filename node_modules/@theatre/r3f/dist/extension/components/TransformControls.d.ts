import type { Object3D, Event } from 'three';
import React from 'react';
import type { ReactThreeFiber, Overwrite } from '@react-three/fiber';
import { TransformControls as TransformControlsImpl } from 'three-stdlib';
import type { OrbitControls } from 'three-stdlib';
type R3fTransformControls = Overwrite<ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl>, {
    target?: ReactThreeFiber.Vector3;
}>;
export interface TransformControlsProps extends R3fTransformControls {
    object: Object3D;
    orbitControlsRef?: React.MutableRefObject<OrbitControls | null>;
    onObjectChange?: (event: Event) => void;
    onDraggingChange?: (event: Event) => void;
    mode: TransformControlsImpl['mode'];
    space: TransformControlsImpl['space'];
}
declare const TransformControls: React.ForwardRefExoticComponent<Omit<TransformControlsProps, "ref"> & React.RefAttributes<unknown>>;
export default TransformControls;
//# sourceMappingURL=TransformControls.d.ts.map